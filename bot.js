const Discord = require('discord.js');
const client = new Discord.Client();
const ayarlar = require('./ayarlar.json');
const chalk = require('chalk');
const fs = require('fs');
const moment = require('moment');
require('./util/eventLoader')(client);

var prefix = ayarlar.prefix;

const log = message => {
  console.log(`[${moment().format('YYYY-MM-DD HH:mm:ss')}] ${message}`);
};

client.commands = new Discord.Collection();
client.aliases = new Discord.Collection();
fs.readdir('./komutlar/', (err, files) => {
  if (err) console.error(err);
  log(`${files.length} komut y√ºklenecek.`);
  files.forEach(f => {
    let props = require(`./komutlar/${f}`);
    log(`Y√ºklenen komut: ${props.help.name}.`);
    client.commands.set(props.help.name, props);
    props.conf.aliases.forEach(alias => {
      client.aliases.set(alias, props.help.name);
    });
  });
});

client.reload = command => {
  return new Promise((resolve, reject) => {
    try {
      delete require.cache[require.resolve(`./komutlar/${command}`)];
      let cmd = require(`./komutlar/${command}`);
      client.commands.delete(command);
      client.aliases.forEach((cmd, alias) => {
        if (cmd === command) client.aliases.delete(alias);
      });
      client.commands.set(command, cmd);
      cmd.conf.aliases.forEach(alias => {
        client.aliases.set(alias, cmd.help.name);
      });
      resolve();
    } catch (e){
      reject(e);
    }
  });
};

client.load = command => {
  return new Promise((resolve, reject) => {
    try {
      let cmd = require(`./komutlar/${command}`);
      client.commands.set(command, cmd);
      cmd.conf.aliases.forEach(alias => {
        client.aliases.set(alias, cmd.help.name);
      });
      resolve();
    } catch (e){
      reject(e);
    }
  });
};

client.unload = command => {
  return new Promise((resolve, reject) => {
    try {
      delete require.cache[require.resolve(`./komutlar/${command}`)];
      let cmd = require(`./komutlar/${command}`);
      client.commands.delete(command);
      client.aliases.forEach((cmd, alias) => {
        if (cmd === command) client.aliases.delete(alias);
      });
      resolve();
    } catch (e){
      reject(e);
    }
  });
};


client.on('message', async msg => {
    if (msg.content.toLowerCase() === 'sa') {
      await msg.react('üá¶');
      msg.react('üá∏');
    }
    });



client.elevation = message => {
  if(!message.guild) {
	return; }
  let permlvl = 0;
  if (message.member.hasPermission("BAN_MEMBERS")) permlvl = 2;
  if (message.member.hasPermission("ADMINISTRATOR")) permlvl = 3;
  if (message.author.id === ayarlar.sahip) permlvl = 4;
  return permlvl;
};

var regToken = /[\w\d]{24}\.[\w\d]{6}\.[\w\d-_]{27}/g;
// client.on('debug', e => {
//   console.log(chalk.bgBlue.green(e.replace(regToken, 'that was redacted')));
// });

client.on('warn', e => {
  console.log(chalk.bgYellow(e.replace(regToken, 'that was redacted')));
});

client.on('error', e => {
  console.log(chalk.bgRed(e.replace(regToken, 'that was redacted')));
});








client.on('message', message => {
    if (message.author.bot) return;
    if (!message.content.startsWith(prefix)) return;
  
    let command = message.content.split(' ')[0];
    command = command.slice(prefix.length);
  
    let args = message.content.split(' ').slice(1);
  
    if (command === 'tavsiyeni-g√∂nder' || command === 'tavsiye') {
      let str = '<@432239481534414848>';//@silmeyin!
      let id = str.replace(/[<@!>]/g, '');
      let mesaj = args.slice(0).join(' ');
      if (mesaj.length < 1) return message.reply(` ‚ö† tavsiyeni yazmayƒ± unuttun. ‚ö† `);
      message.channel.sendEmbed(new Discord.RichEmbed()
      .setColor('RANDOM')
      .setDescription(''));
      const embed = new Discord.RichEmbed()
      .setColor('RANDOM')
      .setTitle('Tavsiye bilgileri;')
      .addField('Tavsiye:', mesaj, true)
      .addField('Kullanƒ±cƒ± adƒ±:', message.author.tag, true)
      .addField('Kullanƒ±cƒ± kimliƒüi:', message.author.id, true)
      .addField('Sunucu adƒ±:', message.guild.name, true)
      .addField('Sunucu kimliƒüi:', message.guild.id, true)
      client.fetchUser(id)
      .then(user => {user.send({embed})})
    }
  });


  client.on('message', message => {
    if (message.content.toLowerCase() === prefix + "zekam") {
        var sans = ["11", "15", "20", "24", "28", "31", "39", "45", "49", "54", "58", "63", "67", "77", "73", "84", "80", "83", "96", "94", "99", "Albert Einstein mƒ±sƒ±n krd≈üm"];
        var sonuc = sans[Math.floor((Math.random() * sans.length))];
        const embed = new Discord.RichEmbed()
        .addField(`***___Zekan___***`, `${sonuc}`)
        return message.channel.sendEmbed(embed);
    }
    });



    client.on('message', message => {
        if (message.content.toLowerCase() === prefix + "espriyap") {
            var sans = ["Ge√ßen g√ºn ge√ßmi≈ü g√ºnlerimi aradƒ±m ama me≈üguld√º.", "Yaƒümur yaƒümƒ±≈ü kar peynir", "D√ºnya d√∂nermi≈ü ay da k√∂fte‚Ä¶", "Bu erikson ba≈üka erik yok.", "Yƒ±kanan Ton a ne denir Washington", "Hadi oyun oynayalƒ±m. Vazge√ßtim oymadan oynayalƒ±m!", "Ge√ßen g√ºn kamyonu s√ºrd√ºm Leonardo da Vinci.", "Doƒüumdan sonra √ßok kilo aldƒ±m. Doƒüduƒüumda 2 kiloydum ≈üimdi 62.", "Adam 7 g√ºn boyunca nezle olmu≈ü. Sƒ±kƒ±lmƒ±≈ü bug√ºn de Petek le olayƒ±m demi≈ü.", "Yarasa yararlƒ± bir hayvandƒ±r. Yararlƒ± bir hayvan olmasaydƒ± yaramasa derlerdi.", " Benim neden karde≈üim yok baba  Seni g√∂r√ºnce ikincisine cesaret edemedik.", "Osmanlƒ±da kimseye bor√ß takamƒ±yordun mesela sikke sikke √∂d√ºyodun‚Ä¶", "Tatlƒ± yiyip, tatlƒ± konu≈üuluyorsa bundan sonra mantƒ± yiyip mantƒ±klƒ± konu≈üacaƒüƒ±z.", "Babamƒ± sahura kaldƒ±rmayƒ± unuttuk anneme masada ne eksik diyorum tuzluk mu diyor.", "+Okeyde kƒ±za elin nasƒ±l dedim. Ojeli dedi. Ben ≈ûoka girdim. O Migrosa.", "Canƒ±m sƒ±kkƒ±n kanka sonra gel"];
            var sonuc = sans[Math.floor((Math.random() * sans.length))];
            const embed = new Discord.RichEmbed()
            .addField(`***___Espri___***`, `${sonuc}`)
            return message.channel.sendEmbed(embed);
        }
        });



        client.on('message', msg => {
            if (msg.content.toLowerCase() === prefix + "sigara") {
            msg.channel.send(':smoking: :cloud::cloud::cloud:')
            .then(nmsg => nmsg.edit(':smoking: :cloud::cloud::cloud:'))
            .then(nmsg => nmsg.edit(':smoking: :cloud::cloud:'))
            .then(nmsg => nmsg.edit(':smoking: :cloud::cloud:'))
            .then(nmsg => nmsg.edit(':smoking: :cloud:'))
            .then(nmsg => nmsg.edit(':smoking: :cloud:'))
            .then(nmsg => nmsg.edit('**Sigaram bitti** | **Sigara ƒ∞√ßmeyiniz.** :no_smoking: **Sigara Saƒülƒ±ƒüa Zararlƒ±dƒ±r**'));
            }
            });


            client.on("message", msg => {
                const kufur = ["amk", "aq", "orospu", "oruspu", "o√ß", "sikerim", "yarrak", "pi√ß", "amq", "sik", "amcƒ±k", "√ßocu", "sex", "seks", "amƒ±na", "meme"];
                if (kufur.some(word => msg.content.includes(word)) ) {
                    msg.delete()
                    msg.reply("BU SUNUCU EMN TARAFINDA K√úF√úRLERE KAPALIDIR")
                }
            });


           

            client.on('message', msg => {
                if (msg.content.startsWith(prefix + "√ßekili≈ü")) {
                  msg.channel.send(`√áekili≈üi Kazanan: ${msg.guild.members.random().displayName}`);
                  }
                  });

                  


                  client.on("message", message => {
                    const dmchannel = client.channels.find("name", "dm-log");
                    if (message.channel.type === "dm") {
                        if (message.author.bot) return;
                        dmchannel.sendMessage("", {embed: {
                            color: 3447003,
                            title: `G√∂nderen: ${message.author.tag}`,
                            description: `Bota √ñzelden G√∂nderilen DM: ${message.content}`
                        }})
                    }
                });


                
                
                


                
client.login(ayarlar.token);
